import os
from pathlib import Path
import argparse
import loss_functions as lf
from sympy.utilities.lambdify import lambdastr

TEMPLATE = """
# This file is generated by backend/app/alignment/loss_functions_generator.py
# Do not edit manually

from alignment.utils import wrap_with_numpy


gradient_penalties_lambda = wrap_with_numpy(
    {gradient_penalties_lambda}
)


gradient_optimized_err_lambda = wrap_with_numpy(
    {gradient_optimized_err_lambda}
)

"""


def generate_loss_functions_code():
    gradient_penalties_lambda_str = lambdastr(lf.theta, lf.gradient_penalties)
    gradient_optimized_err_lambda_str = lambdastr(
        lf.taz_cosines + lf.az_coordinates + lf.theta,
        lf.gradient_optimized_err)
    return TEMPLATE.format(
        gradient_penalties_lambda=gradient_penalties_lambda_str,
        gradient_optimized_err_lambda=gradient_optimized_err_lambda_str)


argparser = argparse.ArgumentParser()
argparser.add_argument("--dest_dir", help="Destination directory where the module will be saved")
argparser.add_argument("--module_name", help="Name of the module to be generated")
args = argparser.parse_args()

dest_path = Path(args.dest_dir) / Path(args.module_name)
if not os.path.exists(dest_path):
    os.makedirs(dest_path)

with open(dest_path / "__init__.py", "w") as f:
    f.write(generate_loss_functions_code())
